{
	// Place your snippets for vhdl here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"process (BAESAI)": {
		"prefix": "process",
		"body": "process(${1:clk}) is\nbegin\n\tif rising_edge(${1:clk}) then\n\t\t$0\n\tend if;\nend process;",
		"description": "Clocked process (BAESAI)"
	},
	"case (BAESAI)": {
		"prefix": "case",
		"body": "case(${1:state_r}) is\n\twhen ${2:idle} =>\n\t\t$0\n\twhen others =>\n\nend case;",
		"description": "Case statement (BAESAI)"
	},
	"vhdl (BAESAI)": {
		"prefix": "vhdl",
		"body": "library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.al;\n\nentity ${1:ent} is\n\tport\n\t(\n\t\t${0:clk}\t\t: in  std_logic\n\t);\nend entity;\n\narchitecture rtl of ${1:ent} is\n\nbegin\n\nend architecture;",
		"description": "VHDL template (BAESAI)"
	},
	"if (BAESAI)": {
		"prefix": "if",
		"body": "if (${1:expression}) then\n\t$0\nend if;",
		"description": "If statement (BAESAI)"
	},
	"std_logic_vector (BAESAI)": {
		"prefix": "std_logic_vector(x downto 0)",
		"body": "std_logic_vector(${1:x} downto ${0:0});",
		"description": "std_logic_vector (BAESAI)"
	},
	"unsigned (BAESAI)": {
		"prefix": "unsigned(x downto 0)",
		"body": "unsigned(${1:x} downto ${0:0});",
		"description": "unsigned (BAESAI)"
	},
	"signed (BAESAI)": {
		"prefix": "signed(x downto 0)",
		"body": "signed(${1:x} downto ${0:0});",
		"description": "signed (BAESAI)"
	},
	"delay_bit (BASEAI)": {
		"prefix": "delay_bit",
		"body": "${1:delay_bit_i} : entity work.delay_bit\ngeneric map (delay => ${2:delay})\nport map (clk => ${3:clk}, d => ${4:in}, q => ${5:out});",
		"description": "Delay bit instantiation (BAESAI)"
	},
	"delay_vector (BASEAI)": {
		"prefix": "delay_vector",
		"body": "${1:delay_vector_i} : entity work.delay_vector\ngeneric map (delay => ${2:delay})\nport map (clk => ${3:clk}, d => ${4:in}, q => ${5:out});",
		"description": "Delay vector instantiation (BAESAI)"
	}
}